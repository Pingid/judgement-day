// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateImage {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Image {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  pictured_at: DateTime!
  azure_data: Json!
  imagekey: String!
  source_key: String!
}

type ImageConnection {
  pageInfo: PageInfo!
  edges: [ImageEdge]!
  aggregate: AggregateImage!
}

input ImageCreateInput {
  id: ID
  pictured_at: DateTime!
  azure_data: Json!
  imagekey: String!
  source_key: String!
}

type ImageEdge {
  node: Image!
  cursor: String!
}

enum ImageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  pictured_at_ASC
  pictured_at_DESC
  azure_data_ASC
  azure_data_DESC
  imagekey_ASC
  imagekey_DESC
  source_key_ASC
  source_key_DESC
}

type ImagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  pictured_at: DateTime!
  azure_data: Json!
  imagekey: String!
  source_key: String!
}

type ImageSubscriptionPayload {
  mutation: MutationType!
  node: Image
  updatedFields: [String!]
  previousValues: ImagePreviousValues
}

input ImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ImageWhereInput
  AND: [ImageSubscriptionWhereInput!]
  OR: [ImageSubscriptionWhereInput!]
  NOT: [ImageSubscriptionWhereInput!]
}

input ImageUpdateInput {
  pictured_at: DateTime
  azure_data: Json
  imagekey: String
  source_key: String
}

input ImageUpdateManyMutationInput {
  pictured_at: DateTime
  azure_data: Json
  imagekey: String
  source_key: String
}

input ImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  pictured_at: DateTime
  pictured_at_not: DateTime
  pictured_at_in: [DateTime!]
  pictured_at_not_in: [DateTime!]
  pictured_at_lt: DateTime
  pictured_at_lte: DateTime
  pictured_at_gt: DateTime
  pictured_at_gte: DateTime
  imagekey: String
  imagekey_not: String
  imagekey_in: [String!]
  imagekey_not_in: [String!]
  imagekey_lt: String
  imagekey_lte: String
  imagekey_gt: String
  imagekey_gte: String
  imagekey_contains: String
  imagekey_not_contains: String
  imagekey_starts_with: String
  imagekey_not_starts_with: String
  imagekey_ends_with: String
  imagekey_not_ends_with: String
  source_key: String
  source_key_not: String
  source_key_in: [String!]
  source_key_not_in: [String!]
  source_key_lt: String
  source_key_lte: String
  source_key_gt: String
  source_key_gte: String
  source_key_contains: String
  source_key_not_contains: String
  source_key_starts_with: String
  source_key_not_starts_with: String
  source_key_ends_with: String
  source_key_not_ends_with: String
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
}

input ImageWhereUniqueInput {
  id: ID
  imagekey: String
}

scalar Json

scalar Long

type Mutation {
  createImage(data: ImageCreateInput!): Image!
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  updateManyImages(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): BatchPayload!
  upsertImage(where: ImageWhereUniqueInput!, create: ImageCreateInput!, update: ImageUpdateInput!): Image!
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteManyImages(where: ImageWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  image(where: ImageWhereUniqueInput!): Image
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image]!
  imagesConnection(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageConnection!
  node(id: ID!): Node
}

type Subscription {
  image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
}
`